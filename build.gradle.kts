plugins {
  val kotlin = "1.7.21"
  kotlin("multiplatform") version kotlin
  kotlin("plugin.serialization") version kotlin
  application
}

group = "com.fynnian"
version = "1.0-SNAPSHOT"

object Versions {
  const val wrapperBom = "1.0.0-pre.442"
  const val serializationJson = "1.4.1"
  const val coroutines = "1.6.4"
  const val ktor = "2.0.3"
  const val logback = "1.2.11"
}

repositories {
  mavenCentral()
  maven("https://maven.pkg.jetbrains.space/public/p/kotlinx-html/maven")
}

fun kotlinw(target: String): String =
  "org.jetbrains.kotlin-wrappers:kotlin-$target"

kotlin {
  jvm {
    compilations.all {
      kotlinOptions.jvmTarget = "17"
    }
    withJava()
    testRuns["test"].executionTask.configure {
      useJUnitPlatform()
    }
  }
  js(IR) {
    binaries.executable()
    browser {
      commonWebpackConfig {
        cssSupport.enabled = true
        devServer?.open = false

      }
    }
  }
  sourceSets {
    val commonMain by getting {
      dependencies {
        implementation("io.ktor:ktor-client-core:${Versions.ktor}")
        implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:${Versions.serializationJson}")
        implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:${Versions.coroutines}")
      }
    }
    val commonTest by getting {
      dependencies {
        implementation(kotlin("test-common"))
        implementation(kotlin("test-annotations-common"))
      }
    }
    val jvmMain by getting {
      dependencies {
        implementation("io.ktor:ktor-serialization:${Versions.ktor}")
        implementation("io.ktor:ktor-server-content-negotiation:${Versions.ktor}")
        implementation("io.ktor:ktor-serialization-kotlinx-json:${Versions.ktor}")
        implementation("io.ktor:ktor-server-cors:${Versions.ktor}")
        implementation("io.ktor:ktor-server-compression:${Versions.ktor}")
        implementation("io.ktor:ktor-server-core-jvm:${Versions.ktor}")
        implementation("io.ktor:ktor-server-netty:${Versions.ktor}")
        implementation("io.ktor:ktor-serialization-kotlinx-json:${Versions.ktor}")
        implementation("ch.qos.logback:logback-classic:${Versions.logback}")
        implementation("org.jetbrains.kotlinx:kotlinx-html-jvm:0.7.2")
      }
    }
    val jvmTest by getting {

    }
    val jsMain by getting {
      dependencies {
        implementation("io.ktor:ktor-client-js:${Versions.ktor}")
        implementation("io.ktor:ktor-client-content-negotiation:${Versions.ktor}")
        implementation("io.ktor:ktor-serialization-kotlinx-json:${Versions.ktor}")

        implementation(project.dependencies.enforcedPlatform(kotlinw("wrappers-bom:${Versions.wrapperBom}")))
        implementation(kotlinw("react"))
        implementation(kotlinw("react-dom"))
        implementation(kotlinw("react-router-dom"))
        implementation(kotlinw("emotion"))
        implementation(kotlinw("mui"))
        implementation(kotlinw("mui-icons"))
      }
    }
    val jsTest by getting {

    }
  }
}

application {
  mainClass.set("com.fynnian.application.ServerKt")
}

// include JS artifacts in any JAR we generate
tasks.getByName<Jar>("jvmJar") {
  val taskName = if (project.hasProperty("isProduction")
    || project.gradle.startParameter.taskNames.contains("installDist")
  ) {
    "jsBrowserProductionWebpack"
  } else {
    "jsBrowserDevelopmentWebpack"
  }
  val webpackTask = tasks.getByName<org.jetbrains.kotlin.gradle.targets.js.webpack.KotlinWebpack>(taskName)
  dependsOn(webpackTask) // make sure JS gets compiled first
  from(File(webpackTask.destinationDirectory, webpackTask.outputFileName)) // bring output file along into the JAR
}

tasks.getByName<JavaExec>("run") {
  classpath(tasks.getByName<Jar>("jvmJar")) // so that the JS artifacts generated by `jvmJar` can be found and served
}

// workaround for hardcoded webpack version 4.9 that has a bug
// https://stackoverflow.com/a/72731728/12381648
rootProject.extensions.configure<org.jetbrains.kotlin.gradle.targets.js.nodejs.NodeJsRootExtension> {
  versions.webpackCli.version = "4.10.0"
}